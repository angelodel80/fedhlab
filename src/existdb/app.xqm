xquery version "3.1";

(:~ This is the default application library module of the first-app app.
 :
 : @author Angelo
 : @version 1.0.0
 : @see www.ilc.cnr.it
 :)

(: Module for app-specific template functions :)
module namespace app="http://exist-db.org/apps/first/templates";
import module namespace templates="http://exist-db.org/xquery/html-templating";
import module namespace lib="http://exist-db.org/xquery/html-templating/lib";
import module namespace config="http://exist-db.org/apps/first/config" at "config.xqm";


(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated).
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 :
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)

declare
    %templates:wrap
function app:foo($node as node(), $model as map(*)) {
    <p>Dummy templating function.</p>
};

declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};




declare 
    %templates:wrap %templates:default("lemma", "ttt")
function app:context($node as node(), $model as map(*), $lemma as xs:string) as map(*) {
    let $l := if ($lemma = "") then "ttt" else $lemma
    let $eclo := doc('/db/apps/first/resources/xml/switchboard.clarin.eu-step9.xml')
    let $words := $eclo//w[ft:query(@lemma, string($l))]
    return map {
        "words" : $words
    }
};

declare 
    %templates:wrap 
function app:locus($node as node(), $model as map(*)) as xs:string {
    string-join($model("w")/ancestor::l)
};
declare 
    %templates:wrap 
function app:eclo($node as node(), $model as map(*)) as xs:string {
    string($model("w")/ancestor::div1/descendant::head/descendant::title)
};

declare 
    %templates:wrap 
function app:verse($node as node(), $model as map(*)) as xs:string {
    string($model("w")/ancestor::l/@n)
};

declare 
    %templates:wrap %templates:default("lemma", "ttt")
function app:query($node as node(), $model as map(*), $lemma as xs:string) {
    let $l := if ($lemma = "") then "ttt" else $lemma
    let $eclo := doc('/db/apps/first/resources/xml/switchboard.clarin.eu-step9.xml')
    let $words := $eclo//w[ft:query(@lemma, string($l))]
    for $w at $idx in $words
    return 
        <li style="list-style-type:none">
         <span style="font-weight:bold">{$idx}</span>
         <span class="lemmata" style="padding-left:1em">{string($w)}</span>
         <span style="font-style:italic; padding-left:1em">
            (
             {string($w/@lemma)} in
             {string($w/ancestor::div1/descendant::head/descendant::title)},
             {string($w/ancestor::l/@n)}
            
            )
             
         </span>
        </li>
};


